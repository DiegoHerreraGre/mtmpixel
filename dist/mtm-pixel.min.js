!(function () {
  const t = {
    config: {
      apiEndpoint: "https://api.mtmdigital.cl/dashboard-mtm-digital",
      debug: !1,
      maxRetries: 1,
      timeout: 5e3,
    },
    init: function () {
      this.generateUserId(),
        this.setupEventListeners(),
        this.initializeSession();
    },
    initializeSession: function () {
      sessionStorage.getItem("mtm_session_start") ||
        (sessionStorage.setItem("mtm_session_start", new Date().toISOString()),
        sessionStorage.setItem("mtm_landing_url", window.location.href),
        sessionStorage.setItem("mtm_pages_visited", "0"),
        sessionStorage.setItem("mtm_initial_referrer", document.referrer));
      const t = parseInt(sessionStorage.getItem("mtm_pages_visited") || "0");
      sessionStorage.setItem("mtm_pages_visited", (t + 1).toString());
    },
    generateUserId: function () {
      let t = localStorage.getItem("mtm_user_id");
      t || ((t = this.generateUUID()), localStorage.setItem("mtm_user_id", t)),
        (this.userId = t);
    },
    generateUUID: function () {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
        /[xy]/g,
        function (t) {
          const e = (16 * Math.random()) | 0;
          return ("x" === t ? e : (3 & e) | 8).toString(16);
        }
      );
    },
    getUtmParams: function () {
      const t = new URLSearchParams(window.location.search),
        e = ["utm_source", "utm_medium", "utm_campaign"];
      let n = "";
      return (
        e.forEach((e) => {
          t.has(e) && (n += (n ? "&" : "") + e + "=" + t.get(e));
        }),
        n
      );
    },
    getBrowser: function () {
      const t = navigator.userAgent;
      return t.includes("Chrome")
        ? "Chrome"
        : t.includes("Firefox")
        ? "Firefox"
        : t.includes("Safari") && !t.includes("Chrome")
        ? "Safari"
        : t.includes("Edge")
        ? "Edge"
        : t.includes("MSIE") || t.includes("Trident/")
        ? "Internet Explorer"
        : "Other";
    },
    getDeviceCategory: function () {
      const t = navigator.userAgent;
      return /iPad|Android(?!.*Mobile)|Tablet/i.test(t)
        ? "Tablet"
        : /Mobile|Android|iPhone|iPod/i.test(t)
        ? "Mobile"
        : "Desktop";
    },
    setupEventListeners: function () {
      document.addEventListener("submit", (t) => {
        t.target.tagName === "FORM" &&
          this.trackEvent("form_submit", {
            form_id: t.target.id || "undefined",
            form_name: t.target.getAttribute("name") || "unnamed",
            form_action: t.target.action,
          });
      });
    },
    getSessionDuration: function () {
      const t = sessionStorage.getItem("mtm_session_start");
      return t ? Math.floor((Date.now() - new Date(t).getTime()) / 1e3) : 0;
    },
    sendEventWithRetry: async function (t, e = 0) {
      const n = new AbortController(),
        i = setTimeout(() => n.abort(), this.config.timeout);
      try {
        const s = await fetch(this.config.apiEndpoint, {
          method: "POST",
          mode: "cors",
          signal: n.signal,
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(t),
        });
        if ((clearTimeout(i), !s.ok))
          throw new Error(`HTTP error! Status: ${s.status}`);
        const o = await s.json();
        this.config.debug && console.log("Evento registrado:", t.event, o);
      } catch (s) {
        if (
          (clearTimeout(i),
          this.config.debug &&
            console.error("Error enviando evento:", s.message),
          e < this.config.maxRetries && "AbortError" !== s.name)
        )
          return (
            this.config.debug &&
              console.log(
                `Reintentando (${e + 1}/${this.config.maxRetries})...`
              ),
            await new Promise((t) => setTimeout(t, 1e3)),
            this.sendEventWithRetry(t, e + 1)
          );
        console.error("No se pudo enviar el evento tras reintentos:", s);
      }
    },
    trackEvent: function (t, e = {}) {
      const n = sessionStorage.getItem("mtm_session_start"),
        i = parseInt(sessionStorage.getItem("mtm_pages_visited") || "0"),
        s = sessionStorage.getItem("mtm_landing_url"),
        o = {
          user_id: this.userId,
          event: t,
          timestamp: new Date().toISOString(),
          utm: this.getUtmParams(),
          website_source: document.referrer || window.location.hostname,
          referrer: document.referrer,
          landing_url: s || window.location.href,
          conversion_url: "form_submit" === t ? window.location.href : "",
          form_id: e.form_id || "",
          form_name: e.form_name || "",
          conversion_type: t,
          session_duration: n
            ? Math.floor((Date.now() - new Date(n).getTime()) / 1e3)
            : 0,
          pages_visited: i,
          conversion_time_from_landing: s
            ? Math.floor((Date.now() - new Date(n).getTime()) / 1e3)
            : 0,
          device_category: this.getDeviceCategory(),
          browser: this.getBrowser(),
          ...e,
        };
      this.sendEventWithRetry(o);
    },
  };
  window.MTMPixel = t;
  const e = new URLSearchParams(window.location.search);
  (e.has("utm_source") ||
    e.has("utm_medium") ||
    e.has("utm_campaign") ||
    document.querySelector("form")) &&
    t.init();
})();
